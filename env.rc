
alias o_o='source ~/.bashrc'
export DXCONFIGPATH=/opt/my/dxconfig

resetworld() {
    git reset --hard HEAD
    git clean -fdx
}

fsum () {
    [ $# -ne 2 ] && return;
    find $1 -type f -name $2 -exec md5sum {} \;
}

findexedll() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find "$m" -type f \( -name '*.exe' -o -name '*.dll' \)))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findgit() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -name '.git*'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findjson() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -type f -name '*.json'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findxml() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -type f -name '*.xml'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findproperties() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -type f -name '*.properties'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findgradles() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -type f -name '*.gradle'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findjar() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -type f -name '*.jar'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findjava() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find "$m" -type f -name '*.java'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findc() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find "$m" -type f \( -name '*.h' -o -name '*.c' -o -name '*.cpp' \)))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findcap() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -type f -name '*.cap'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findexp() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -type f -name '*.exp'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findclass() {
    local m
    [ $# -eq 0 ] && m=. || m=$1
    z=($(find $m -type f -name '*.class'))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findjavawith() {
    [ $# -eq 0 ] && return 
    local string=$1
    z=($(find . -type f -name '*.java' -exec grep -q -w $string {} \; -exec echo {} \;))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findallwith() {
    [ $# -eq 0 ] && return 
    local string=$1
    z=($(find . -type f -exec grep -q -w $string {} \; -exec echo {} \;))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

findext() {
    [ $# -eq 0 ] && return 
    local m
    local n
    if [ $# -eq 1 ];then
        m=.
        n=$1
    else
        m=$1
        n=$2
    fi
    z=($(find $m -type f -name *.$n))
    local f
    for f in ${z[*]};do
        echo $f
    done
}

rmcap() {
   find . -type f -name '*.cap' -exec rm -f {} \;
}

rmexp() {
   find . -type f -name '*.exp' -exec rm -f {} \;
}

rmclass() {
   find . -type f -name '*.class' -exec rm -f {} \;
}

rmexedll() {
    find . -type f \( -name '*.exe' -o -name '*.dll' \) -exec rm -f {} \;
}

iii() {
    local basepath=~/.my/finds
    local d=$(pwd | tr '/' '.')
    local dd=${d:1}
    mkdir -p $basepath/$dd
    pwd > $basepath/$dd/meta
    local timplit=$basepath/$dd/XXXXX
    local tmpf=$(mktemp $timplit)
    local t=$(</dev/stdin)
    echo "$t" > $tmpf
    ln -sf $tmpf $basepath/current
    nl -v 0 -ba $tmpf
}

__() {
    local basepath=~/.my/finds
    local current=$basepath/current
    local t=$(dirname $(readlink -f $current))
    d=$(< $t/meta)
    if [ $# -eq 0 ];then
        x=($(<$current))
    else
        local var=$1
        eval "${var}=($(<$current))"
    fi
}

tagjava() {
    > tags
    local sdk=/cygdrive/c/Users/63927/src/oracle_javacard_sdks
    local jcardsim=/cygdrive/c/Users/63927/src/oracle_javacard_sdks
    find . $sdk $jcardsim -name \*.java -exec ctags --append {} \;
    find . -type f -name '*.java' > cscope.files
    cscope -q -R -b -i cscope.files
}

tagc() {
    > tags
    find . \( -name '*.c' -o -name '*.h' -o -name '*.cpp' \)  -exec ctags --append {} \;
}

iii() {
    local basepath=~/.my/finds
    local d=$(pwd | tr '/' '.')
    local dd=${d:1}
    mkdir -p $basepath/$dd
    pwd > $basepath/$dd/meta
    local timplit=$basepath/$dd/XXXXX
    local tmpf=$(mktemp $timplit)
    local t=$(</dev/stdin)
    echo "$t" > $tmpf
    ln -sf $tmpf $basepath/current
    nl -v 0 -ba $tmpf
}

__() {
    local basepath=~/.my/finds
    local current=$basepath/current
    local t=$(dirname $(readlink -f $current))
    d=$(< $t/meta)
    if [ $# -eq 0 ];then
        x=($(<$current))
    else
        local var=$1
        eval "${var}=($(<$current))"
    fi
}

git_submodule() {
    git submodule update --init
}

git_authorcommits() {
    git shortlog -s -n --all --no-merges
}

git_log(){
    git log --graph --decorate --oneline
}

git_followshowdiff() {
    [ $# -eq 0 ] && return
    local f=$1
    if [ ! -r "$f" ];then
        echo "file not found"
        return
    fi
    git log --reverse --pretty="format:%H" --follow -- $f | tail +2 | while read chash;do
        git diff ${chash}^..${chash} $f
        read -p "----------------------" var
    done
}

git_followshowauthor() {
    [ $# -eq 0 ] && return
    local f=$1
    if [ ! -r "$f" ];then
        echo "file not found"
        return
    fi
    git log --pretty="format:%H|%ci|%an" --follow -- $f
}

git_byauthor() {
    local otor="$*"
    #echo "[$otor]"
    git log --no-merges --author="$otor" --name-only --pretty=format:"%H|%ci" # | sort -u
}

git_diff() {
    [ $# -eq 0 ] && return
    local chash=$1
    git diff $chash^..$chash
}

_() {
    if [ $# -eq 0 ];then 
        a=`pwd`
    else
        local var=$1
        local value=`pwd`
        #eval ${var}=`echo -ne \""${value}"\"`
        eval ${var}='${value}'
    fi
}

checkcard() {
    cd ~/bin/
    local checksum=$(java -jar ~/src/GlobalPlatformPro/gp.jar --list | md5sum | cut -d' ' -f1)
    #[ $checksum = "c2a8441fbddd4e65fa5a953c1a53a3a2" ] && echo "clean" || echo "dirty"

    case "$checksum" in
    af34ffc7e0720e89060e9565542a9404)
    echo "fresh load"
    ;;
    a80ea79ea2c00ec22a141fba55a0bd41)
    echo "clean"
    ;;
    *)  
    echo "dirty"
    ;;
    esac
}

gg() {
    git config --global user.email "daixtr@gmail.com"
    git config --global user.name "dexter"
}
